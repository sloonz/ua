#!/usr/bin/python3

import time
import email.utils
import json
import os
import sys
import logging

from weboob.core import Weboob
from weboob.capabilities.messages import CapMessages
from weboob.tools.log import createColoredFormatter
from weboob.tools.storage import StandardStorage

storage_path = os.path.expanduser("~/.cache/weboobmsg2json.cache")

w = Weboob()
w.load_backends(CapMessages, storage = StandardStorage(storage_path))

if os.getenv("DEBUG"):
	format = '%(asctime)s:%(levelname)s:%(name)s:' + \
			':%(filename)s:%(lineno)d:%(funcName)s %(message)s'
	handler = logging.StreamHandler(sys.stderr)
	handler.setFormatter(createColoredFormatter(sys.stderr, format))
	logging.root.setLevel(logging.DEBUG)
	logging.root.addHandler(handler)

def get_message_id(m, backend):
	return "%s.%s" % (backend, m.full_id)

if len(sys.argv) > 1:
	backend = sys.argv[1]
	messages = w[backend].iter_unread_messages()
else:
	backend = None
	messages = w.iter_unread_messages()

for weboob_msg in messages:
	backend = backend or weboob_msg.backend

	references = []
	m = weboob_msg.parent
	while m:
		references.append(get_message_id(m, backend))
		m = m.parent

	references.reverse()

	json_msg = {
			"body": weboob_msg.content,
			"title": weboob_msg.title or ("Re: %s" % weboob_msg.thread.title),
			"date": email.utils.formatdate(time.mktime(weboob_msg.date.timetuple())),
			"author": weboob_msg.sender,
			"id": get_message_id(weboob_msg, backend),
			"host": "weboob.ua.localhost",
			"references": references
	}

	if hasattr(weboob_msg, "url"):
		json_msg["url"] = weboob_msg.url
		json_msg["body"] += '<p><small><a href="%s">View post</a></small></p>' % weboob_msg.url

	w[backend].set_message_read(weboob_msg)
	print(json.dumps(json_msg))

w.deinit()
